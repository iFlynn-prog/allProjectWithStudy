package iFlynnJava.Functions.Task3;

/**
 * 3. Алгоритм вычисления значения функции F(n), где n — целое неотрицательное число, задан следующими соотношениями:
 * F(0) = 0;
 * F(n)=F*(n/ 2), если n > 0 и при этом чётно;
 * F(n) = 1 + F*(n − 1), если n нечётно.
 * Сколько существует таких чисел n, что 1 ≤ n ≤ 1000 и F(n)=3? (ответ: 120)
 * - Подсказка
 * Следует написать функцию, которая принимает на вход число n.
 * Далее, отразить в ней данные в задаче соотношения через if-else.
 * Наконец, в функции main сделать цикл от 1 до 1000, проверять, равняется ли F(i) тройке,
 * и если да, то увеличивать счетчик на единицу (который заводится предварительно).
 */

public class Task3 {
    public static void main(String[] args) {
        int count = 0;

        for (int i = 1; i <= 1000; i++) {
           // System.out.println(i);
        }
        System.out.println(F(1));
    }

   public static int F(int n) {
        if ( n == 0) {
            System.out.println("Равно нулю");

        } else if (n > 0 && n % 2 ==0) {
            n = F(n / 2);

        } else {
            n = 1 + F(n - 1);

        }
         return n;
    }


}

